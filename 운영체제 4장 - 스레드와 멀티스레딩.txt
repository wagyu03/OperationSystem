>>> [ 스레드의 개념 ] 
		
	(1)
	- 프로세스 = [ 스레드, 스레드, 스레드(더빠름)]
	- 스레드는 프로세스의 주소공간을 나누어 사용
	- 스레드는 힙,데이터,코드,스택 를 가진 실체
	- 스레드의 작업은 함수로 작성
	- 프로세스에 속한 모든 스레드가 끝나면, 프로세스 종료

	(2)	
	- 스레드들 끼리 함수, 전역변수 등 공유
	- 스레드 하나당 TCB 하나를 씀
	1.동시성 : CPU의 빈시간 마다 스레드 처리
	2.병렬성 : 여러개의 CPU들이 동시다발적으로 스레드 처리

--------------------------------------------------------------------------

>>> [ 스레드 주소 공간]
	>> 스레드가 사용하는 공간 : Heap , Data , Stack , Code 영역
	
	스레드가 공유하지 않는 유일한 공간: Stack , TLS(전용 변수 공간)
	>>[TLS] : 데이터 영역에 저장

	>> [스레드의 커널 스텍]
		- 스레드를 시스템호출로 불러내는데, 이를 위해 
		  "USER STACK" 에 더해 "KERNEL STACK" 영역이 따로 있음.

>> [ 컨텍스 스위칭 되는경우]
	1. yield
	2. read(), sleep() , wait() : 와 같이 I/O를 요청한 경우
	(시스템 콜)
	
	3. time-out 이 되었을떄 (타이머 인터럽트)
	4. I/O장치로 부터 인터럽트(더 높은 우선순위)
	(인터럽트)
	
	> [같은 프로세스 내에 스위칭]
	현재 CPU내용을 TCB에 저장, 캐시 미싱으로 채워지는 시간은 스위칭에 해당 x
	> [다른 프로세스 에 스위칭]
	다른 프로세스의 스레드는 시간이 더걸림, 매핑테이블을 새로운 프로세스로 교체
	캐시 미싱의 시간이 이부분이 더 걸림

	
>>> [ 사용자 레벨 스레드 ] 
	사용자 공간에서 스레드 라이브러리를 사용해, USER 공간에서 자급자족

	- 컨텍스트 스위칭 : 커널 모드에 들어가지 않기 때문에, 속도가 빠름	
	- 이식성 : 라이브러리 사용하기 때문에 운영체제 종류 무상관
	- 병렬성 : 동시성
	- 블로킹 : 하나의 스레드만 중단해도 프로세스가 중단 (최대단점)

	>>[메핑] (시험 안나옴)
	N:1
	커널 스레드 1개 --> 유저 스레드 1~10개 (Tread 하나 블록되면 Process 블록)

	1:1
	커널 스레드 1개 --> 유저 스레드 1개 
	
	N:M
	커널 스레드 1~10개 --> 유저 스레드 1~10개 
-------------------------------------------------------------------------------------------------

정리 & 장점: 
 - 프로세스는 적재단위, 스레드는 실행 단위
 - 병렬 실행 쌉가능
 - 응용프로그램의 구조 단순화
 - 시스템 자원 효율성 > 프로세스는 fork()를 통해 통쨰로 복제하는 반면, 스레드는 TCB하나로 퉁퉁퉁퉁 사후르

- 멀티스레딩은 fork()와 exec()를 쓰지않음
	