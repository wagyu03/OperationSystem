>>> [프로세스 테이블과 프로세스 제어 블록]

	> 테이블에 들어가는 내용 (PCB : 프로세스 제어 블록)
	- PID (프로세스 번호)
	- PPID(부모 프로세스 번호)
	- 프로세스 상태
	
	>>[ 프로세스 생명 주기, 상태 변이 ]
	
	NEW --->
 	Ready --->
 	Running --> Blocked  = I/O, sleep(), 자원 사용기다리기
	Running --> Ready = yield(), 바로 양보받기
	Running --> Terminated(PCB 남아있음) = 종료 직전 단계, 부모 프로세스 한테 종료 확인 받아야함
	Zombie --> Out = PCB가 프로세스 테이블에서 사라짐.

	>>[ 프로세스는 부모 - 자식 관계] : 모두 자식을 만들면서 생성
	
	#0 프로세스는 시스템 부팅시 실행되는 최초.
	프로세스 생성을 , 시스템 호출을 통해서만 가능:
	fork(), clone()
	
	(리눅스 예시: 자세히 X)
	#1 프로세스 - init 모든 프로세스의 조상
	#2 프로세스 - kernel 의 모든 프로세스의 조상
	
	>> [ 좜비 프로세스 죽이기 ]
	
	1. 부모한테 SIGCHLD 신호 wait()호출 하여 좀비 신호 제어
	2. 부모 프로세스 강제 종료
-----------------------------------------------------------------------

>> [ 프로세스 생성과정 ]

	새로운 PID 번호 할당
	 -> PCB 구조체 생성
 	 -> 프로세스 테이블에서 할당
	 -> 할당된 항목에 PCB연결 
	 -> 프로세슬 위한 메모리 공간 할당
	
	fork() : 부모프로세스와 똑같은 프로세스를 카피함
	exeplc() : 자식 프로세스를 메모리 영역에 새로운 프로그램을 할당함
	
	>> [ 프로세스 종료 ]
	exit() 시스템 호출 ( C : exit = return 문이 생략됨)
	-> 1. 프로세스 자원 반환 (힙, 스택, 코드 등)
	-> 2. PCB상태를 terminated를 변경, PBC에 종료코드 저장
	-> 3. 자식들이 있으면 init에게 입양
	-> 4. 부모에게 GIDCHLD 신호 전송 , wait()를 이용해 종료
